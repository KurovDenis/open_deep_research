#!/usr/bin/env python3
"""
Demo Enhanced Streaming for SGR
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è SGR —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import time
import json
import re
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.live import Live
from rich.layout import Layout

# Add src to path for proper imports
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root / "src"))

from open_deep_research.sgr_streaming.enhanced_streaming import enhanced_streaming_display, EnhancedSchemaParser
from open_deep_research.sgr_streaming.sgr_visualizer import SGRLiveMonitor, demo_sgr_visualization

def demo_json_streaming_parsing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    console = Console()
    
    console.print(Panel(
        "üöÄ [bold cyan]Enhanced JSON Streaming Demo[/bold cyan]\n"
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∫—Ä–∞—Å–∏–≤–æ –ø–∞—Ä—Å–∏—Ç—Å—è JSON —Å—Ö–µ–º–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
        title="Demo",
        border_style="cyan"
    ))
    
    # –ü—Ä–∏–º–µ—Ä JSON —Å—Ö–µ–º—ã –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    sample_next_step_json = '''{
    "reasoning_steps": [
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ BMW X6",
        "–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        "–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    ],
    "current_situation": "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞",
    "plan_status": "–ù–µ —Å–æ–∑–¥–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞",
    "searches_done": 0,
    "enough_data": false,
    "remaining_steps": [
        "–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        "–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–µ–±-–ø–æ–∏—Å–∫",
        "–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"
    ],
    "task_completed": false,
    "function": {
        "tool": "generate_plan",
        "reasoning": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞ BMW X6",
        "research_goal": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ BMW X6 2025 –≥–æ–¥–∞ –≤ –†–æ—Å—Å–∏–∏",
        "planned_steps": [
            "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö BMW",
            "–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω —É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–ª–µ—Ä–æ–≤",
            "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤",
            "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Ü–µ–Ω–æ–≤—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏"
        ],
        "search_strategies": [
            "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ BMW –†–æ—Å—Å–∏–∏",
            "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–ª–µ—Ä—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã",
            "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã —Ü–µ–Ω"
        ]
    }
}'''
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = EnhancedSchemaParser(console)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –ø–æ —á–∞—Å—Ç—è–º
    layout = Layout()
    
    with Live(layout, console=console, refresh_per_second=8) as live:
        accumulated = ""
        
        # –°—Ç—Ä–∏–º–∏–º JSON –ø–æ –∫—É—Å–∫–∞–º
        chunk_size = 30
        for i in range(0, len(sample_next_step_json), chunk_size):
            chunk = sample_next_step_json[i:i+chunk_size]
            accumulated += chunk
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            table, questions = parser.update_from_json(accumulated)
            layout.update(table)
            
            time.sleep(0.1)  # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        time.sleep(1.5)
    
    console.print("\n‚úÖ [bold green]JSON Streaming Demo Complete![/bold green]")

def demo_schema_specific_displays():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º"""
    console = Console()
    
    console.print(Panel(
        "üé® [bold magenta]Schema-Specific Displays Demo[/bold magenta]\n"
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ö–µ–º",
        title="Demo",
        border_style="magenta"
    ))
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—Ö–µ–º
    schemas = {
        "clarification": {
            "tool": "clarification",
            "reasoning": "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏",
            "unclear_terms": ["BMW X6", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã", "2025 –≥–æ–¥"],
            "assumptions": [
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ü–µ–Ω—ã –≤ –†–æ—Å—Å–∏–∏",
                "–ù—É–∂–Ω—ã —Ü–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"
            ],
            "questions": [
                "–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ª–∏ –≤–∞—Å —Ü–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–µ –∏–ª–∏ –ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ BMW X6?",
                "–ù—É–∂–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è–º?",
                "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –ª–∏ –≤—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏?"
            ]
        },
        "web_search": {
            "tool": "web_search",
            "reasoning": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö BMW X6",
            "query": "BMW X6 2025 —Ü–µ–Ω—ã –†–æ—Å—Å–∏–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∏–ª–µ—Ä—ã",
            "max_results": 10,
            "scrape_content": True
        },
        "create_report": {
            "tool": "create_report",
            "reasoning": "–°–æ–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞",
            "title": "–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ BMW X6 2025 –≥–æ–¥–∞ –≤ –†–æ—Å—Å–∏–∏",
            "confidence": "high",
            "content": "# –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ\n\n–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ, —á—Ç–æ —Ü–µ–Ω—ã –Ω–∞ BMW X6 2025 –≥–æ–¥–∞ –≤ –†–æ—Å—Å–∏–∏ –≤–∞—Ä—å–∏—Ä—É—é—Ç—Å—è –æ—Ç 8.5 –¥–æ 12.5 –º–ª–Ω —Ä—É–±–ª–µ–π..."
        }
    }
    
    for schema_name, schema_data in schemas.items():
        console.print(f"\nüìã [bold cyan]Schema: {schema_name}[/bold cyan]")
        
        parser = EnhancedSchemaParser(console)
        json_str = json.dumps(schema_data, ensure_ascii=False, indent=2)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Å—Ç—Ä–∏–º–∏–Ω–≥
        table, questions = parser.update_from_json(json_str)
        console.print(table)
        if questions:
            questions_table = Table(title="‚ùî Questions", show_header=False)
            questions_table.add_column("Q", style="yellow", width=60)
            for i, q in enumerate(questions, 1):
                questions_table.add_row(f"{i}. {q}")
            console.print(questions_table)
        time.sleep(1)

def demo_full_sgr_process():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ SGR –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    console = Console()
    
    console.print(Panel(
        "üîÑ [bold green]Full SGR Process Demo[/bold green]\n"
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SGR –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π",
        title="Demo",
        border_style="green"
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ –∏–∑ sgr_visualizer
    demo_sgr_visualization()

def main():
    """–ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    console = Console()
    
    console.print(Panel(
        "[bold cyan]üöÄ Enhanced Streaming Demo Suite üöÄ[/bold cyan]\n\n"
        "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è SGR —Å–∏—Å—Ç–µ–º—ã:\n"
        "‚Ä¢ JSON –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SGR –ø—Ä–æ—Ü–µ—Å—Å–∞\n"
        "‚Ä¢ –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
        title="üéØ Enhanced SGR Streaming",
        border_style="cyan"
    ))
    
    demos = [
        ("1", "JSON Streaming Parser", demo_json_streaming_parsing),
        ("2", "Schema-Specific Displays", demo_schema_specific_displays),
        ("3", "Full SGR Process Monitor", demo_full_sgr_process),
        ("4", "All Demos", None)
    ]
    
    for num, name, func in demos:
        console.print(f"  {num}. [cyan]{name}[/cyan]")
    
    while True:
        try:
            choice = input("\nüî¢ Select demo (1-4) or 'q' to quit: ").strip()
            
            if choice.lower() == 'q':
                console.print("üëã [bold yellow]Goodbye![/bold yellow]")
                break
            
            if choice == "1":
                demo_json_streaming_parsing()
            elif choice == "2":
                demo_schema_specific_displays()
            elif choice == "3":
                demo_full_sgr_process()
            elif choice == "4":
                console.print("\nüé¨ [bold cyan]Running all demos...[/bold cyan]")
                demo_json_streaming_parsing()
                console.print("\n" + "="*60)
                demo_schema_specific_displays()
                console.print("\n" + "="*60)
                demo_full_sgr_process()
            else:
                console.print("‚ùå [red]Invalid choice. Please select 1-4 or 'q'[/red]")
                
        except KeyboardInterrupt:
            console.print("\nüëã [bold yellow]Demo interrupted. Goodbye![/bold yellow]")
            break
        except Exception as e:
            console.print(f"‚ùå [red]Error: {e}[/red]")

if __name__ == "__main__":
    main()
