#!/usr/bin/env python3
"""
Compact Streaming Example
–ü—Ä–∏–º–µ—Ä –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –±–µ–∑ –±–æ–ª—å—à–∏—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤
"""

import time
import json
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.live import Live
from rich.layout import Layout
from rich.box import ROUNDED

def compact_streaming_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
    console = Console()
    
    console.print(Panel(
        "üéØ [bold cyan]Compact Streaming Demo[/bold cyan]\n"
        "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –±–µ–∑ –±–æ–ª—å—à–∏—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        title="Compact Demo",
        border_style="cyan",
        expand=False,
        width=60
    ))
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º JSON —Å—Ç—Ä–∏–º–∏–Ω–≥
    sample_json = '''{
    "tool": "web_search",
    "reasoning": "–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö BMW X6",
    "query": "BMW X6 2025 —Ü–µ–Ω—ã –†–æ—Å—Å–∏–∏",
    "max_results": 10,
    "scrape_content": true
}'''
    
    layout = Layout()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º transient=False –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    with Live(layout, console=console, refresh_per_second=10, transient=False) as live:
        
        accumulated = ""
        
        # –°—Ç—Ä–∏–º–∏–º –ø–æ –∫—É—Å–∫–∞–º
        for i in range(0, len(sample_json), 15):
            chunk = sample_json[i:i+15]
            accumulated += chunk
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_table = Table(show_header=False, box=None, padding=(0, 1))
            progress_table.add_column("", style="cyan", width=12)
            progress_table.add_column("", style="white", width=25)
            
            progress = len(accumulated) / len(sample_json)
            bar_filled = int(progress * 20)
            bar = "‚ñà" * bar_filled + "‚ñë" * (20 - bar_filled)
            
            progress_table.add_row("üì° Streaming", f"{bar} {progress*100:.0f}%")
            progress_table.add_row("üìù Content", f"{len(accumulated)} chars")
            
            # –ü—Ä–µ–≤—å—é JSON
            preview = accumulated[-50:] if len(accumulated) > 50 else accumulated
            if not accumulated.strip().endswith('}'):
                preview += "..."
                
            progress_table.add_row("üëÄ Preview", preview[:30] + "..." if len(preview) > 30 else preview)
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å
            compact_panel = Panel(
                progress_table,
                title="üöÄ JSON Streaming",
                border_style="yellow" if progress < 1.0 else "green",
                box=ROUNDED,
                expand=False,
                width=50
            )
            
            layout.update(compact_panel)
            time.sleep(0.08)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        final_table = Table(show_header=False, box=None, padding=(0, 1))
        final_table.add_column("", style="bold green", width=12)
        final_table.add_column("", style="white", width=25)
        
        final_table.add_row("‚úÖ Complete", "JSON parsed successfully")
        final_table.add_row("üìä Schema", "web_search detected")
        final_table.add_row("‚ö° Speed", f"{len(sample_json)/2:.0f} chars/sec")
        
        final_panel = Panel(
            final_table,
            title="üéØ Streaming Complete",
            border_style="green",
            box=ROUNDED,
            expand=False,
            width=50
        )
        
        layout.update(final_panel)
        time.sleep(1.0)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
    
    # –ü–æ—Å–ª–µ Live - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    console.print("\n‚ú® [bold green]Compact streaming demo finished![/bold green]")
    console.print("   No large gaps, clean output! üéâ")

def comparison_demo():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    console = Console()
    
    console.print(Panel(
        "üìä [bold magenta]Before vs After Comparison[/bold magenta]\n\n"
        "[red]BEFORE:[/red] Large gaps after streaming\n"
        "[green]AFTER:[/green] Compact, clean output\n\n"
        "Key improvements:\n"
        "‚Ä¢ Fixed width panels (expand=False)\n"  
        "‚Ä¢ Shorter display times (1s vs 3s)\n"
        "‚Ä¢ Compact summary tables\n"
        "‚Ä¢ No excessive whitespace",
        title="üîß Improvements",
        border_style="magenta",
        expand=False,
        width=55
    ))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    console = Console()
    
    console.print("[bold cyan]üéØ Compact Streaming Solutions[/bold cyan]\n")
    
    while True:
        choice = input("Choose demo: [1] Compact Streaming [2] Comparison [q] Quit: ").strip()
        
        if choice == '1':
            compact_streaming_demo()
        elif choice == '2':
            comparison_demo()
        elif choice.lower() == 'q':
            console.print("üëã [yellow]Goodbye![/yellow]")
            break
        else:
            console.print("‚ùå [red]Invalid choice[/red]")

if __name__ == "__main__":
    main()
