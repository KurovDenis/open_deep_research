"""SGR Configuration for LangGraph agent with custom model and API settings."""

import os
from pydantic import BaseModel
from typing import Optional


class SGRConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è SGR-–∞–≥–µ–Ω—Ç–∞ –Ω–∞ LangGraph."""
    
    # API Keys (—Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    OPENROUTER_API_KEY: Optional[str] = "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"
    TAVILY_API_KEY: Optional[str] = "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"

    # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    SUPERVISOR_MODEL_NAME: str = "google/gemini-2.0-flash-001"
    RESEARCHER_MODEL_NAME: str = "google/gemini-2.0-flash-001"
    WRITER_MODEL_NAME: str = "google/gemini-2.0-flash-001"
    CLARIFIER_MODEL_NAME: str = "google/gemini-2.0-flash-001"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    MAX_SUPERVISOR_ITERATIONS: int = 3
    MAX_SEARCH_RESULTS: int = 5
    MAX_RESEARCH_CALLS: int = 5

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
    MAX_STRUCTURED_OUTPUT_RETRIES: int = 3
    ALLOW_CLARIFICATION: bool = True
    MAX_CONCURRENT_RESEARCH_UNITS: int = 5
    MAX_REACT_TOOL_CALLS: int = 10
    MAX_CONTENT_LENGTH: int = 50000
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π
    SUMMARIZATION_MODEL_MAX_TOKENS: int = 8192
    RESEARCH_MODEL_MAX_TOKENS: int = 10000
    COMPRESSION_MODEL_MAX_TOKENS: int = 8192
    FINAL_REPORT_MODEL_MAX_TOKENS: int = 10000
    
    # SGR Streaming –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    STREAMING_ENABLED: bool = True
    STREAMING_DISPLAY_TYPE: str = "enhanced"  # "simple", "enhanced", "live"
    STREAMING_UPDATE_INTERVAL: float = 0.1  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
    STREAMING_ANIMATION_SPEED: float = 1.0  # —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    
    # SGR Schema –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    SGR_SCHEMA_VALIDATION: bool = True
    SGR_MAX_REASONING_STEPS: int = 4
    SGR_CONFIDENCE_THRESHOLD: float = 0.7
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    ENABLE_LIVE_MONITOR: bool = True
    ENABLE_STEP_TRACKER: bool = True
    ENABLE_PROGRESS_BAR: bool = True

    def __init__(self, **kwargs):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π API –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        env_openrouter_key = os.getenv('OPENROUTER_API_KEY')
        env_tavily_key = os.getenv('TAVILY_API_KEY')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if env_openrouter_key:
            kwargs.setdefault('OPENROUTER_API_KEY', env_openrouter_key)
        if env_tavily_key:
            kwargs.setdefault('TAVILY_API_KEY', env_tavily_key)
            
        super().__init__(**kwargs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π
        self._validate_api_keys()
    
    def _validate_api_keys(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π."""
        # Since we have default values, we don't need to raise errors
        # Just warn if using defaults
        if (self.OPENROUTER_API_KEY == "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" or 
            self.TAVILY_API_KEY == "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"):
            # Using default keys, which is fine for testing
            pass

    def apply_environment_variables(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        if self.OPENROUTER_API_KEY:
            os.environ["OPENROUTER_API_KEY"] = self.OPENROUTER_API_KEY
        if self.TAVILY_API_KEY:
            os.environ["TAVILY_API_KEY"] = self.TAVILY_API_KEY
            
        os.environ["OPENROUTER_API_BASE"] = "https://openrouter.ai/api/v1"
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ API –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if self.OPENROUTER_API_KEY:
            os.environ["OPENAI_API_KEY"] = self.OPENROUTER_API_KEY
            os.environ["ANTHROPIC_API_KEY"] = self.OPENROUTER_API_KEY
            os.environ["GOOGLE_API_KEY"] = self.OPENROUTER_API_KEY
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")

    def get_openrouter_model_name(self, role: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è OpenRouter —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º."""
        model_mapping = {
            "supervisor": self.SUPERVISOR_MODEL_NAME,
            "researcher": self.RESEARCHER_MODEL_NAME, 
            "writer": self.WRITER_MODEL_NAME,
            "clarifier": self.CLARIFIER_MODEL_NAME
        }
        
        model_name = model_mapping.get(role, self.RESEARCHER_MODEL_NAME)
        
        # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å openai: –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å init_chat_model
        if not model_name.startswith(("openai:", "anthropic:", "google:")):
            return f"openai:{model_name}"
        return model_name

    def to_configuration_dict(self) -> dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Configuration –∫–ª–∞—Å—Å–æ–º."""
        return {
            "max_structured_output_retries": self.MAX_STRUCTURED_OUTPUT_RETRIES,
            "allow_clarification": self.ALLOW_CLARIFICATION,
            "max_concurrent_research_units": self.MAX_CONCURRENT_RESEARCH_UNITS,
            "max_researcher_iterations": self.MAX_SUPERVISOR_ITERATIONS,
            "max_react_tool_calls": self.MAX_REACT_TOOL_CALLS,
            "search_api": "tavily",
            "summarization_model": self.get_openrouter_model_name("researcher"),
            "summarization_model_max_tokens": self.SUMMARIZATION_MODEL_MAX_TOKENS,
            "max_content_length": self.MAX_CONTENT_LENGTH,
            "research_model": self.get_openrouter_model_name("researcher"),
            "research_model_max_tokens": self.RESEARCH_MODEL_MAX_TOKENS,
            "compression_model": self.get_openrouter_model_name("researcher"),
            "compression_model_max_tokens": self.COMPRESSION_MODEL_MAX_TOKENS,
            "final_report_model": self.get_openrouter_model_name("writer"),
            "final_report_model_max_tokens": self.FINAL_REPORT_MODEL_MAX_TOKENS,
        }

    def get_sgr_streaming_config(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è SGR streaming"""
        return {
            "streaming_enabled": self.STREAMING_ENABLED,
            "display_type": self.STREAMING_DISPLAY_TYPE,
            "update_interval": self.STREAMING_UPDATE_INTERVAL,
            "animation_speed": self.STREAMING_ANIMATION_SPEED,
            "schema_validation": self.SGR_SCHEMA_VALIDATION,
            "max_reasoning_steps": self.SGR_MAX_REASONING_STEPS,
            "confidence_threshold": self.SGR_CONFIDENCE_THRESHOLD,
            "enable_monitor": self.ENABLE_LIVE_MONITOR,
            "enable_tracker": self.ENABLE_STEP_TRACKER,
            "enable_progress": self.ENABLE_PROGRESS_BAR
        }


# –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: API –∫–ª—é—á–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–∞
try:
    config = SGRConfig()
    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –æ–∫—Ä—É–∂–µ–Ω–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
    config.apply_environment_variables()
except ValueError as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    print("üí° –ü—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞:")
    print("OPENROUTER_API_KEY=sk-or-v1-your-key-here")
    print("TAVILY_API_KEY=tvly-your-key-here")
    config = None