"""Unified SGR Workflow - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç Open Deep Research —Å SGR Streaming"""

from typing import Literal
from langgraph.graph import StateGraph, END, START
from langgraph.types import Command

from open_deep_research.deep_researcher import (
    clarify_with_user, 
    write_research_brief, 
    final_report_generation,
    supervisor_subgraph,
    researcher_subgraph
)
from open_deep_research.configuration import Configuration
from open_deep_research.state import AgentState

from .sgr_langgraph_adapter import SGRStreamingNode, SGRDecisionRouter
from .streaming_researcher import StreamingResearcher


class UnifiedSGRWorkflow:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π workflow Open Deep Research + SGR Streaming"""
    
    def __init__(self, sgr_config):
        self.sgr_config = sgr_config
        self.sgr_node = SGRStreamingNode(sgr_config.get_sgr_streaming_config())
        self.streaming_researcher = StreamingResearcher()
        self.router = SGRDecisionRouter()
    
    def build_graph(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π LangGraph"""
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å SGR –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
        builder = StateGraph(AgentState, config_schema=Configuration)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
        builder.add_node("clarify_with_user", clarify_with_user)
        builder.add_node("write_research_brief", write_research_brief)
        builder.add_node("sgr_reasoning", self.sgr_node)
        builder.add_node("research_supervisor", self.streaming_researcher.streaming_supervisor_wrapper)
        builder.add_node("final_report_generation", final_report_generation)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π flow
        builder.add_edge(START, "clarify_with_user")
        
        # SGR —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –ø–æ—Å–ª–µ clarification
        builder.add_conditional_edges(
            "clarify_with_user",
            self._route_after_clarification,
            {
                "brief": "write_research_brief",
                "end": END
            }
        )
        
        builder.add_edge("write_research_brief", "sgr_reasoning")
        
        # SGR –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
        builder.add_conditional_edges(
            "sgr_reasoning",
            self.router.route_sgr_decision,
            {
                "research": "research_supervisor",
                "report": "final_report_generation", 
                "clarify": "clarify_with_user",
                "end": END
            }
        )
        
        # –ü–æ—Å–ª–µ research supervisor —Å–Ω–æ–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ SGR –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        builder.add_edge("research_supervisor", "sgr_reasoning")
        builder.add_edge("final_report_generation", END)
        
        return builder.compile()
    
    def _route_after_clarification(self, state: AgentState) -> str:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è"""
        
        messages = state.get("messages", [])
        if not messages:
            return "end"
        
        last_message = messages[-1]
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç AI –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        if hasattr(last_message, 'content'):
            content = last_message.content
            if "?" in content or "—É—Ç–æ—á–Ω" in content.lower() or "clarif" in content.lower():
                return "end"  # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        return "brief"  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–ª–∞–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è


class SGREnhancedNodes:
    """SGR-—É–ª—É—á—à–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–∑–ª–æ–≤"""
    
    def __init__(self, sgr_config):
        self.sgr_config = sgr_config
        self.streaming_enabled = sgr_config.get("streaming_enabled", True)
    
    async def enhanced_clarify_with_user(self, state: AgentState, config) -> Command:
        """–£—Ç–æ—á–Ω–µ–Ω–∏–µ —Å SGR –∞–Ω–∞–ª–∏–∑–æ–º"""
        
        if self.streaming_enabled:
            print("ü§î SGR Enhanced Clarification...")
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        result = await clarify_with_user(state, config)
        
        if self.streaming_enabled:
            print("‚úÖ Clarification completed")
            
        return result
    
    async def enhanced_write_research_brief(self, state: AgentState, config) -> Command:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å SGR –∞–Ω–∞–ª–∏–∑–æ–º"""
        
        if self.streaming_enabled:
            print("üìã SGR Enhanced Research Planning...")
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        result = await write_research_brief(state, config)
        
        if self.streaming_enabled:
            print("‚úÖ Research plan created")
            
        return result
    
    async def enhanced_final_report_generation(self, state: AgentState, config):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å SGR –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        
        if self.streaming_enabled:
            print("üìù SGR Enhanced Report Generation...")
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
        result = await final_report_generation(state, config)
        
        if self.streaming_enabled:
            print("‚úÖ Final report generated")
            
        return result


class SGRWorkflowBuilder:
    """Builder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π SGR workflow"""
    
    @staticmethod
    def build_simple_sgr_workflow(sgr_config):
        """–ü—Ä–æ—Å—Ç–æ–π SGR workflow —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
        
        workflow = UnifiedSGRWorkflow(sgr_config)
        return workflow.build_graph()
    
    @staticmethod  
    def build_enhanced_sgr_workflow(sgr_config):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π SGR workflow —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
        
        builder = StateGraph(AgentState, config_schema=Configuration)
        enhanced_nodes = SGREnhancedNodes(sgr_config)
        sgr_node = SGRStreamingNode(sgr_config.get_sgr_streaming_config())
        router = SGRDecisionRouter()
        
        # –î–æ–±–∞–≤–ª—è–µ–º enhanced —É–∑–ª—ã
        builder.add_node("clarify_with_user", enhanced_nodes.enhanced_clarify_with_user)
        builder.add_node("write_research_brief", enhanced_nodes.enhanced_write_research_brief)
        builder.add_node("sgr_reasoning", sgr_node)
        builder.add_node("research_supervisor", supervisor_subgraph)
        builder.add_node("final_report_generation", enhanced_nodes.enhanced_final_report_generation)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º flow
        builder.add_edge(START, "clarify_with_user")
        builder.add_edge("clarify_with_user", "write_research_brief")
        builder.add_edge("write_research_brief", "sgr_reasoning")
        
        builder.add_conditional_edges(
            "sgr_reasoning",
            router.route_sgr_decision,
            {
                "research": "research_supervisor",
                "report": "final_report_generation",
                "clarify": "clarify_with_user", 
                "end": END
            }
        )
        
        builder.add_edge("research_supervisor", "sgr_reasoning")
        builder.add_edge("final_report_generation", END)
        
        return builder.compile()
    
    @staticmethod
    def build_streaming_focused_workflow(sgr_config):
        """SGR workflow —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ streaming –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
        
        # –≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å workflow —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π SGR –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
        # –∫–æ–≥–¥–∞ –≤—Å–µ SGR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã
        
        try:
            from ..sgr_streaming.sgr_streaming import SGRAgent
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π SGR agent
            sgr_agent = SGRAgent(sgr_config.get_sgr_streaming_config())
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SGR streaming
            # –∫–æ–≥–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã
            
            workflow = UnifiedSGRWorkflow(sgr_config)
            return workflow.build_graph()
            
        except ImportError:
            print("‚ö†Ô∏è  Full SGR streaming not available, using enhanced workflow")
            return SGRWorkflowBuilder.build_enhanced_sgr_workflow(sgr_config)