"""Streaming Researcher - –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è researcher —Å SGR streaming –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""

import asyncio
from typing import Dict, Any, Optional
from langchain_core.runnables import RunnableConfig

from open_deep_research.deep_researcher import supervisor, supervisor_tools
from open_deep_research.state import SupervisorState, AgentState

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SGR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    from ..sgr_streaming.sgr_visualizer import SGRLiveMonitor
    from ..sgr_streaming.sgr_step_tracker import SGRStepTracker
    from rich.console import Console
    SGR_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è  SGR streaming components not available for streaming researcher")
    SGR_AVAILABLE = False
    Console = None


class StreamingResearcher:
    """Wrapper –¥–ª—è researcher —Å SGR streaming –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.monitor = None
        self.tracker = None
        
        if SGR_AVAILABLE:
            self.console = Console()
            self.monitor = SGRLiveMonitor(self.console)
            self.tracker = SGRStepTracker()
    
    async def streaming_supervisor_wrapper(self, state: AgentState, config: RunnableConfig):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è supervisor —Å streaming –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        
        if self.monitor and SGR_AVAILABLE:
            return await self._supervisor_with_monitoring(state, config)
        else:
            return await self._supervisor_simple(state, config)
    
    async def _supervisor_with_monitoring(self, state: AgentState, config: RunnableConfig):
        """Supervisor —Å –ø–æ–ª–Ω—ã–º SGR –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        
        try:
            with self.monitor.live_display():
                self.monitor.update_status("üë®‚Äçüíº Starting research supervision...")
                
                # –¢—Ä–µ–∫–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞
                if self.tracker:
                    self.tracker.start_step("supervisor_planning")
                
                # –°–æ–∑–¥–∞–µ–º supervisor state –∏–∑ agent state
                supervisor_state = self._convert_to_supervisor_state(state)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º supervisor
                self.monitor.update_status("üß† Analyzing research requirements...")
                result = await supervisor(supervisor_state, config)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º supervisor tools –µ—Å–ª–∏ –µ—Å—Ç—å tool calls
                if hasattr(result, 'update') and 'supervisor_messages' in result.update:
                    self.monitor.update_status("üîß Executing supervisor tools...")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    for key, value in result.update.items():
                        supervisor_state[key] = value
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º tools
                    tools_result = await supervisor_tools(supervisor_state, config)
                    
                    self.monitor.update_status("‚úÖ Research supervision completed")
                    
                    if self.tracker:
                        self.tracker.complete_step("supervisor_planning")
                    
                    return tools_result
                
                return result
                
        except Exception as e:
            print(f"Error in streaming supervisor: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–µ–∂–∏–º—É
            return await self._supervisor_simple(state, config)
    
    async def _supervisor_simple(self, state: AgentState, config: RunnableConfig):
        """–ü—Ä–æ—Å—Ç–æ–π supervisor –±–µ–∑ streaming"""
        
        print("üë®‚Äçüíº Research supervision (simple mode)...")
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º state –¥–ª—è supervisor
            supervisor_state = self._convert_to_supervisor_state(state)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º supervisor
            result = await supervisor(supervisor_state, config)
            
            print("‚úÖ Research supervision completed")
            return result
            
        except Exception as e:
            print(f"Error in supervisor: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º minimal —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {"supervisor_messages": [], "research_iterations": 1}
    
    def _convert_to_supervisor_state(self, agent_state: AgentState) -> SupervisorState:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç AgentState –≤ SupervisorState"""
        
        supervisor_state = {
            "supervisor_messages": agent_state.get("supervisor_messages", []),
            "research_brief": agent_state.get("research_brief", ""),
            "notes": agent_state.get("notes", []),
            "research_iterations": 0,
            "raw_notes": agent_state.get("raw_notes", [])
        }
        
        return supervisor_state


class StreamingProgressTracker:
    """–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è streaming –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self):
        self.current_step = 0
        self.total_steps = 5  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        self.step_descriptions = [
            "üîç Analyzing request",
            "üìã Planning research", 
            "üåê Searching information",
            "üìä Processing results",
            "üìù Generating report"
        ]
        self.start_time = None
        
    def start_tracking(self):
        """–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        import time
        self.start_time = time.time()
        self.current_step = 0
        
    def next_step(self, description: str = None):
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"""
        self.current_step += 1
        
        if description:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            if self.current_step <= len(self.step_descriptions):
                self.step_descriptions[self.current_step - 1] = description
        
        self._update_display()
    
    def _update_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if self.current_step <= len(self.step_descriptions):
            current_desc = self.step_descriptions[self.current_step - 1]
            progress = self.current_step / self.total_steps
            
            print(f"[{progress:.1%}] {current_desc}")
    
    def complete(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"""
        import time
        if self.start_time:
            elapsed = time.time() - self.start_time
            print(f"‚úÖ Research completed in {elapsed:.1f} seconds")


class SGRStreamingWrapper:
    """–û–±—â–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SGR streaming –∫ –ª—é–±—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º"""
    
    def __init__(self, enable_streaming: bool = True):
        self.enable_streaming = enable_streaming and SGR_AVAILABLE
        self.progress_tracker = StreamingProgressTracker()
    
    def wrap_function(self, func, description: str):
        """–û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ SGR streaming –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        
        async def wrapped(*args, **kwargs):
            if self.enable_streaming:
                self.progress_tracker.next_step(description)
            
            try:
                result = await func(*args, **kwargs)
                
                if self.enable_streaming:
                    print(f"‚úÖ {description} completed")
                
                return result
                
            except Exception as e:
                if self.enable_streaming:
                    print(f"‚ùå {description} failed: {e}")
                raise e
        
        return wrapped
    
    def create_streaming_pipeline(self, functions_with_descriptions):
        """–°–æ–∑–¥–∞–µ—Ç pipeline –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π —Å streaming –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        
        wrapped_functions = []
        
        for func, description in functions_with_descriptions:
            wrapped_func = self.wrap_function(func, description)
            wrapped_functions.append(wrapped_func)
        
        return wrapped_functions


class SimpleStreamingMonitor:
    """–ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç SGR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.active = False
        self.current_status = "Ready"
    
    def start(self):
        """–ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.active = True
        print("üöÄ Starting research monitoring...")
    
    def update_status(self, status: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"""
        self.current_status = status
        if self.active:
            print(f"üìä {status}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.active = False
        print("üèÅ Research monitoring stopped")
    
    def __enter__(self):
        self.start()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.stop()