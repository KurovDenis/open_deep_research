#!/usr/bin/env python3
"""
Enhanced Streaming Visualization for SGR JSON Schemas
Enhanced JSON schema streaming visualization with animations and detailed metrics
"""

import json
import time
import re
import threading
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from rich.console import Console, Group
from rich.panel import Panel
from rich.table import Table
from rich.live import Live
from rich.layout import Layout
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn, MofNCompleteColumn
from rich.tree import Tree
from rich.syntax import Syntax
from rich.columns import Columns
from rich.box import ROUNDED, DOUBLE, HEAVY
from rich.align import Align
from rich.padding import Padding

@dataclass
class StreamingMetrics:
    """Streaming metrics for detailed analysis"""
    start_time: float
    total_chars: int = 0
    total_chunks: int = 0
    json_parsing_attempts: int = 0
    successful_parses: int = 0
    field_completions: Dict[str, float] = None
    schema_detection_time: float = 0
    first_content_time: float = 0
    completion_time: float = 0
    
    def __post_init__(self):
        if self.field_completions is None:
            self.field_completions = {}
    
    @property
    def elapsed_time(self) -> float:
        return time.time() - self.start_time
    
    @property
    def chars_per_second(self) -> float:
        elapsed = self.elapsed_time
        return self.total_chars / elapsed if elapsed > 0 else 0
    
    @property
    def chunks_per_second(self) -> float:
        elapsed = self.elapsed_time
        return self.total_chunks / elapsed if elapsed > 0 else 0

class EnhancedSchemaParser:
    """Enhanced schema parser with animations and detailed metrics"""
    
    def __init__(self, console: Console):
        self.console = console
        self.current_json = ""
        self.parsed_fields = {}
        self.schema_type = None
        self.metrics = StreamingMetrics(start_time=time.time())
        self.field_progress = {}
        self.field_timing = {}  # Track start/end time for each field
        self.field_durations = {}  # Store completed field durations
        self.animation_frame = 0
        
        # –°—Ö–µ–º—ã –ø–æ–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        self.schema_fields = {
            "clarification": ["tool", "reasoning", "unclear_terms", "assumptions", "questions"],
            "generate_plan": ["tool", "reasoning", "research_goal", "planned_steps", "search_strategies"],
            "web_search": ["tool", "reasoning", "query", "max_results", "scrape_content"],
            "create_report": ["tool", "reasoning", "title", "content", "confidence"],
            "next_step": ["reasoning_steps", "current_situation", "plan_status", "searches_done", "enough_data", "remaining_steps", "task_completed", "function"]
        }
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
        self.field_emojis = {
            "tool": "üîß",
            "reasoning": "üß†",
            "reasoning_steps": "üß©",
            "current_situation": "üìä",
            "query": "üîç",
            "research_goal": "üéØ",
            "title": "üìã",
            "content": "üìù",
            "questions": "‚ùì",
            "unclear_terms": "ü§î",
            "planned_steps": "üìã",
            "remaining_steps": "üìÖ",
            "confidence": "üìà",
            "searches_done": "üîé",
            "enough_data": "‚úÖ"
        }
    
    def detect_schema_type(self, json_content: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å—Ö–µ–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if '"tool":"clarification"' in json_content:
            return "clarification"
        elif '"tool":"generate_plan"' in json_content:
            return "generate_plan"
        elif '"tool":"web_search"' in json_content:
            return "web_search"
        elif '"tool":"create_report"' in json_content:
            return "create_report"
        elif '"reasoning_steps"' in json_content:
            return "next_step"
        else:
            return "unknown"
    
    def get_field_progress(self, field_name: str, json_content: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è (0.0 - 1.0)"""
        if field_name not in json_content:
            return 0.0
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–ª—è
        field_start = json_content.find(f'"{field_name}"')
        if field_start == -1:
            return 0.0
        
        # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
        colon_pos = json_content.find(':', field_start)
        if colon_pos == -1:
            return 0.1  # –ù–∞—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
        value_start = json_content.find('"', colon_pos)
        if value_start == -1:
            # –í–æ–∑–º–æ–∂–Ω–æ —á–∏—Å–ª–æ–≤–æ–µ –∏–ª–∏ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            return 0.5
        
        # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É –∏–ª–∏ —Å–∫–æ–±–∫—É
        if json_content[value_start:value_start+1] == '"':
            # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            closing_quote = json_content.find('"', value_start + 1)
            if closing_quote == -1:
                return 0.7  # –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å, –Ω–æ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
            else:
                return 1.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        elif '[' in json_content[colon_pos:colon_pos+20]:
            # –ú–∞—Å—Å–∏–≤
            bracket_start = json_content.find('[', colon_pos)
            bracket_end = json_content.find(']', bracket_start)
            if bracket_end == -1:
                return 0.8  # –ú–∞—Å—Å–∏–≤ –Ω–∞—á–∞–ª—Å—è, –Ω–æ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
            else:
                return 1.0  # –ú–∞—Å—Å–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω
        
        return 0.5
    
    def create_animated_progress_bar(self, progress: float, width: int = 20) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int(progress * width)
        bar = ""
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
        for i in range(width):
            if i < filled:
                bar += "‚ñà"
            elif i == filled and progress < 1.0:
                # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
                animation_chars = ["‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ"]
                char_index = int((time.time() * 3) % len(animation_chars))
                bar += animation_chars[char_index]
            else:
                bar += "‚ñë"
        
        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if progress < 0.3:
            return f"[red]{bar}[/red]"
        elif progress < 0.7:
            return f"[yellow]{bar}[/yellow]"
        else:
            return f"[green]{bar}[/green]"
    
    def create_schema_tree(self) -> Tree:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Å—Ö–µ–º—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–ª–µ–π"""
        if not self.schema_type or self.schema_type == "unknown":
            tree = Tree("üîç [dim]Detecting schema...[/dim]")
            return tree
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ä–µ–≤–∞
        schema_title = self.schema_type.replace("_", " ").title()
        tree = Tree(f"ü§ñ [bold cyan]{schema_title}[/bold cyan]")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Å—Ö–µ–º—ã
        expected_fields = self.schema_fields.get(self.schema_type, [])
        
        for field in expected_fields:
            progress = self.get_field_progress(field, self.current_json)
            emoji = self.field_emojis.get(field, "üìÑ")
            
            # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –ø–æ–ª—è
            progress_bar = self.create_animated_progress_bar(progress, 15)
            status = "‚úÖ" if progress >= 1.0 else "‚è≥" if progress > 0 else "‚è∏Ô∏è"
            
            field_node = tree.add(f"{emoji} [bold]{field}[/bold] {progress_bar} {status}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if field in self.parsed_fields:
                value = self.parsed_fields[field]
                if isinstance(value, str) and len(value) > 0:
                    preview = value[:40] + "..." if len(value) > 40 else value
                    field_node.add(f"[dim]‚Üí {preview}[/dim]")
                elif isinstance(value, list) and len(value) > 0:
                    field_node.add(f"[dim]‚Üí {len(value)} items[/dim]")
                    for i, item in enumerate(value[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
                        item_preview = str(item)[:30] + "..." if len(str(item)) > 30 else str(item)
                        field_node.add(f"[dim]  {i+1}. {item_preview}[/dim]")
                    if len(value) > 3:
                        field_node.add(f"[dim]  ... –∏ –µ—â–µ {len(value)-3}[/dim]")
                elif isinstance(value, dict):
                    field_node.add(f"[dim]‚Üí Object with {len(value)} keys[/dim]")
        
        return tree
    
    def create_metrics_panel(self) -> Panel:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        metrics_table = Table(show_header=False, box=None, padding=(0, 1))
        metrics_table.add_column("Metric", style="cyan", width=12)
        metrics_table.add_column("Value", style="white")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        elapsed = self.metrics.elapsed_time
        metrics_table.add_row("‚è±Ô∏è Time", f"{elapsed:.1f}s")
        metrics_table.add_row("üìä Chars", f"{self.metrics.total_chars:,}")
        metrics_table.add_row("üì¶ Chunks", f"{self.metrics.total_chunks}")
        metrics_table.add_row("‚ö° Speed", f"{self.metrics.chars_per_second:.0f} ch/s")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
        if self.metrics.json_parsing_attempts > 0:
            parse_success_rate = self.metrics.successful_parses / self.metrics.json_parsing_attempts * 100
            metrics_table.add_row("üéØ Parse", f"{parse_success_rate:.1f}%")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ö–µ–º—ã
        if self.schema_type and self.schema_type != "unknown":
            expected_fields = self.schema_fields.get(self.schema_type, [])
            completed_fields = sum(1 for field in expected_fields if self.get_field_progress(field, self.current_json) >= 1.0)
            schema_progress = completed_fields / len(expected_fields) * 100 if expected_fields else 0
            metrics_table.add_row("üìã Schema", f"{completed_fields}/{len(expected_fields)} ({schema_progress:.0f}%)")
        
        return Panel(
            metrics_table,
            title="üìä Metrics",
            border_style="blue",
            box=ROUNDED
        )
    
    def create_json_preview(self) -> Panel:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é JSON —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
        if not self.current_json:
            return Panel(
                "[dim]Waiting for JSON content...[/dim]",
                title="üìÑ JSON Preview",
                border_style="dim"
            )
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é
        preview_json = self.current_json[-300:] if len(self.current_json) > 300 else self.current_json
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ JSON –æ–±—Ä–µ–∑–∞–Ω
        if len(self.current_json) > 300:
            preview_json = "...\n" + preview_json
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if self.current_json.strip().endswith('}'):
                parsed = json.loads(self.current_json)
                formatted_json = json.dumps(parsed, indent=2, ensure_ascii=False)
                syntax = Syntax(formatted_json, "json", theme="monokai", line_numbers=False)
            else:
                syntax = Syntax(preview_json, "json", theme="monokai", line_numbers=False)
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            syntax = Text(preview_json, style="dim")
        
        return Panel(
            syntax,
            title="üìÑ JSON Preview",
            border_style="green" if self.current_json.strip().endswith('}') else "yellow",
            box=ROUNDED
        )
    
    def create_comprehensive_display(self) -> Group:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–µ—Ä–µ–≤–æ–º, –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –ø—Ä–µ–≤—å—é"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        self.animation_frame += 1
        spinner_chars = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
        spinner = spinner_chars[self.animation_frame % len(spinner_chars)]
        
        if self.current_json.strip().endswith('}'):
            title = f"‚úÖ [bold green]Schema Generation Complete![/bold green]"
        else:
            title = f"{spinner} [bold cyan]Generating Schema...[/bold cyan]"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        schema_tree = self.create_schema_tree()
        metrics_panel = self.create_metrics_panel()
        json_preview = self.create_json_preview()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ –∫–æ–ª–æ–Ω–∫–∏
        top_row = Columns([
            Panel(schema_tree, title="üå≥ Schema Progress", border_style="cyan", box=ROUNDED),
            metrics_panel
        ], equal=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è clarification
        questions_panel = None
        if (self.schema_type == "clarification" and 
            "function" in self.parsed_fields and 
            "questions" in self.parsed_fields["function"] and 
            isinstance(self.parsed_fields["function"]["questions"], list)):
            
            questions = self.parsed_fields["function"]["questions"]
            if questions:
                questions_table = Table(show_header=False, box=None)
                questions_table.add_column("‚ùì Question", style="yellow", width=70)
                
                for i, q in enumerate(questions, 1):
                    questions_table.add_row(f"{i}. {q}")
                
                questions_panel = Panel(
                    questions_table,
                    title="‚ùì Clarification Questions",
                    border_style="yellow",
                    box=ROUNDED
                )
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        components = [
            Panel(title, box=HEAVY, border_style="cyan"),
            top_row,
            json_preview
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if questions_panel:
            components.append(Text(""))  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
            components.append(questions_panel)
        
        return Group(*components)
    
    def update_from_stream_chunk(self, content_delta: str) -> Group:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ —á–∞–Ω–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        self.current_json += content_delta
        self.metrics.total_chars += len(content_delta)
        self.metrics.total_chunks += 1
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if self.metrics.total_chars == len(content_delta):
            self.metrics.first_content_time = time.time()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ö–µ–º—É
        if not self.schema_type or self.schema_type == "unknown":
            new_schema_type = self.detect_schema_type(self.current_json)
            if new_schema_type != "unknown":
                self.schema_type = new_schema_type
                self.metrics.schema_detection_time = time.time()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        self.metrics.json_parsing_attempts += 1
        try:
            if self.current_json.strip().endswith('}'):
                parsed = json.loads(self.current_json)
                self.parsed_fields = parsed
                self.metrics.successful_parses += 1
                self.metrics.completion_time = time.time()
            else:
                # –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                self._partial_parse()
        except:
            pass
        
        return self.create_comprehensive_display()
    
    def _partial_parse(self):
        """–ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
        patterns = {
            'string': r'"([^"]+)"\s*:\s*"([^"]*)"',
            'number': r'"([^"]+)"\s*:\s*(\d+(?:\.\d+)?)',
            'boolean': r'"([^"]+)"\s*:\s*(true|false)',
        }
        
        for pattern_type, pattern in patterns.items():
            matches = re.findall(pattern, self.current_json)
            for field_name, value in matches:
                # Track field timing
                current_time = time.time()
                if field_name not in self.field_timing:
                    self.field_timing[field_name] = {'start': current_time}
                
                if pattern_type == 'number':
                    try:
                        self.parsed_fields[field_name] = float(value) if '.' in value else int(value)
                    except:
                        self.parsed_fields[field_name] = value
                elif pattern_type == 'boolean':
                    self.parsed_fields[field_name] = value.lower() == 'true'
                else:
                    self.parsed_fields[field_name] = value
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤—ã
        array_pattern = r'"([^"]+)"\s*:\s*\[(.*?)\]'
        array_matches = re.findall(array_pattern, self.current_json, re.DOTALL)
        for field_name, array_content in array_matches:
            # Track field timing
            current_time = time.time()
            if field_name not in self.field_timing:
                self.field_timing[field_name] = {'start': current_time}
            
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
            items = re.findall(r'"([^"]*)"', array_content)
            if items:
                self.parsed_fields[field_name] = items
    
    def finalize_field_timings(self):
        """Finalize timing for all fields that have been started"""
        current_time = time.time()
        
        # Calculate field durations differently - based on when field was detected
        # This gives us the time from start of parsing to when each field appeared
        for field_name, timing in self.field_timing.items():
            if 'end' not in timing:
                # Duration is from parsing start to when field was first detected
                self.field_durations[field_name] = timing['start'] - self.metrics.start_time

def enhanced_streaming_display(stream, operation_name: str, console: Console) -> Tuple[Any, str, Dict]:
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
    
    Args:
        stream: OpenAI streaming –æ–±—ä–µ–∫—Ç
        operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        console: Rich console
    
    Returns:
        tuple: (final_response, accumulated_content, metrics_dict)
    """
    
    # Print a separator to distinguish schema generation from dashboard
    console.print("\n" + "‚îÄ" * 80, style="dim")
    console.print(f"üéØ [bold cyan]Starting {operation_name}...[/bold cyan]", justify="center")
    console.print("‚îÄ" * 80 + "\n", style="dim")
    
    parser = EnhancedSchemaParser(console)
    accumulated_content = ""
    
    # –°–æ–∑–¥–∞–µ–º layout –¥–ª—è –∂–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    layout = Layout()
    
    with Live(layout, console=console, refresh_per_second=8, auto_refresh=True, transient=False) as live:
        try:
            for chunk in stream:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞–Ω–∫–∞
                content_delta = None
                
                if hasattr(chunk, 'type') and chunk.type == 'content.delta':
                    content_delta = chunk.delta
                elif hasattr(chunk, 'choices') and chunk.choices:
                    delta = chunk.choices[0].delta
                    if hasattr(delta, 'content') and delta.content:
                        content_delta = delta.content
                
                if content_delta:
                    accumulated_content += content_delta
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    display = parser.update_from_stream_chunk(content_delta)
                    layout.update(display)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_response = stream.get_final_completion()
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            if accumulated_content:
                final_display = parser.update_from_stream_chunk("")  # –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                layout.update(final_display)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—â–µ 1 —Å–µ–∫—É–Ω–¥—É
            time.sleep(1.0)
            
        except Exception as e:
            error_panel = Panel(
                f"‚ùå [bold red]Streaming Error:[/bold red]\n{str(e)}",
                title="Error",
                border_style="red",
                box=HEAVY
            )
            layout.update(error_panel)
            time.sleep(3.0)
            raise
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    # Finalize field timings
    parser.finalize_field_timings()
    
    metrics_dict = {
        "total_time": parser.metrics.elapsed_time,
        "total_chars": parser.metrics.total_chars,
        "total_chunks": parser.metrics.total_chunks,
        "chars_per_second": parser.metrics.chars_per_second,
        "chunks_per_second": parser.metrics.chunks_per_second,
        "schema_type": parser.schema_type,
        "successful_parses": parser.metrics.successful_parses,
        "parse_attempts": parser.metrics.json_parsing_attempts,
        "schema_detection_time": parser.metrics.schema_detection_time - parser.metrics.start_time if parser.metrics.schema_detection_time > 0 else 0,
        "first_content_time": parser.metrics.first_content_time - parser.metrics.start_time if parser.metrics.first_content_time > 0 else 0,
        "field_durations": parser.field_durations  # Add field timing data
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–æ–π
    console.print("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
    _show_compact_summary(console, operation_name, parser.schema_type, metrics_dict)
    
    # Add separator to mark end of schema generation
    console.print("\n" + "‚îÄ" * 80, style="dim")
    console.print(f"‚úÖ [bold green]{operation_name} Complete![/bold green]", justify="center")
    console.print("‚îÄ" * 80 + "\n", style="dim")
    
    return final_response, accumulated_content, metrics_dict

def _show_compact_summary(console: Console, operation_name: str, schema_type: str, metrics: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å–≤–æ–¥–∫—É –±–µ–∑ –±–æ–ª—å—à–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    summary_table = Table(show_header=False, box=None, padding=(0, 1))
    summary_table.add_column("", style="bold", width=12)
    summary_table.add_column("", style="white", width=25)
    summary_table.add_column("", style="dim", width=15)
    
    summary_table.add_row(
        f"‚úÖ {operation_name}",
        f"Schema: {schema_type or 'unknown'}",
        f"{metrics.get('chars_per_second', 0):.0f} ch/s"
    )
    
    # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å –±–µ–∑ –±–æ–ª—å—à–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
    compact_panel = Panel(
        summary_table,
        title="üéØ Completed",
        title_align="left",
        border_style="green",
        box=ROUNDED,
        expand=False,  # –ù–µ —Ä–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        width=60       # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    )
    
    console.print(compact_panel)


# –ü—Ä–∏–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º
class SpecializedDisplays:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ö–µ–º"""
    
    @staticmethod
    def create_clarification_display(parsed_fields: Dict) -> Panel:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è clarification —Å—Ö–µ–º—ã"""
        content = []
        
        if "unclear_terms" in parsed_fields:
            terms_text = Text("ü§î Unclear terms: ", style="bold yellow")
            terms_text.append(", ".join(parsed_fields["unclear_terms"]), style="yellow")
            content.append(terms_text)
        
        if "questions" in parsed_fields:
            questions_table = Table(show_header=False, box=None)
            questions_table.add_column("Q", style="cyan", width=60)
            for i, q in enumerate(parsed_fields["questions"], 1):
                questions_table.add_row(f"{i}. {q}")
            content.append(questions_table)
        
        return Panel(
            Group(*content) if content else "[dim]Preparing clarification...[/dim]",
            title="‚ùì Clarification Request",
            border_style="yellow",
            box=DOUBLE
        )
    
    @staticmethod
    def create_search_display(parsed_fields: Dict) -> Panel:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è web_search —Å—Ö–µ–º—ã"""
        if "query" in parsed_fields:
            query_text = Text("üîç Search Query: ", style="bold cyan")
            query_text.append(parsed_fields["query"], style="white")
            
            return Panel(
                query_text,
                title="üîç Web Search",
                border_style="cyan",
                box=ROUNDED
            )
        
        return Panel(
            "[dim]Preparing search query...[/dim]",
            title="üîç Web Search",
            border_style="dim"
        )
    
    @staticmethod
    def create_report_display(parsed_fields: Dict) -> Panel:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è create_report —Å—Ö–µ–º—ã"""
        content = []
        
        if "title" in parsed_fields:
            title_text = Text("üìã Title: ", style="bold green")
            title_text.append(parsed_fields["title"], style="white")
            content.append(title_text)
        
        if "confidence" in parsed_fields:
            conf_text = Text("üìà Confidence: ", style="bold blue")
            conf_text.append(str(parsed_fields["confidence"]), style="blue")
            content.append(conf_text)
        
        if "content" in parsed_fields:
            word_count = len(parsed_fields["content"].split())
            content_text = Text("üìù Content: ", style="bold cyan")
            content_text.append(f"{word_count} words", style="cyan")
            content.append(content_text)
        
        return Panel(
            Group(*content) if content else "[dim]Preparing report...[/dim]",
            title="üìù Research Report",
            border_style="green",
            box=DOUBLE
        )
