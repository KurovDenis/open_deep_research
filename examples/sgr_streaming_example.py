#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SGR streaming –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Open Deep Research
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(project_root))

from open_deep_research.sgr_config import config
from open_deep_research.sgr_integration.unified_workflow import (
    UnifiedSGRWorkflow, 
    SGRWorkflowBuilder
)


async def simple_sgr_example():
    """Simple example using SGR streaming"""
    
    print("üöÄ SGR Streaming Integration Example")
    print("=" * 50)
    
    # Check configuration
    if config is None:
        print("‚ùå SGR configuration not loaded. Check .env file.")
        print("üí° Copy .env.sgr.example to .env and add your API keys")
        return
    
    print("‚úÖ SGR configuration loaded")
    print(f"üìä Streaming enabled: {config.STREAMING_ENABLED}")
    print(f"üéØ Display type: {config.STREAMING_DISPLAY_TYPE}")
    
    # Test SGR agent creation
    try:
        from open_deep_research.sgr_streaming.sgr_streaming import SGRAgent
        
        # Create config dictionary for SGR agent
        sgr_config_dict = {
            'openai_api_key': config.OPENROUTER_API_KEY,
            'openai_base_url': 'https://openrouter.ai/api/v1',
            'openai_model': config.RESEARCHER_MODEL_NAME,
            'max_tokens': 8000,
            'temperature': 0.4
        }
        
        agent = SGRAgent(sgr_config_dict)
        print("‚úÖ SGR Agent created successfully")
        
        # Test conversation log creation
        test_query = "Research current trends in artificial intelligence"
        conversation_log = agent.get_conversation_log(test_query)
        print(f"‚úÖ Conversation log created with {len(conversation_log)} messages")
        
        # Start research session (demonstration)
        agent.start_research_session(test_query)
        
        print("‚úÖ SGR streaming integration test completed!")
        print("üìù The agent is ready for integration with Open Deep Research")
        
    except Exception as e:
        print(f"‚ùå Error creating SGR agent: {e}")
        import traceback
        traceback.print_exc()
        return


async def enhanced_sgr_example():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º enhanced workflow"""
    
    print("üöÄ Enhanced SGR Streaming Example")
    print("=" * 50)
    
    if config is None:
        print("‚ùå SGR –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º enhanced workflow
    try:
        enhanced_graph = SGRWorkflowBuilder.build_enhanced_sgr_workflow(config)
        print("‚úÖ Enhanced SGR workflow —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è enhanced workflow: {e}")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    query = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–ª–∏—è–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω–¥—É—Å—Ç—Ä–∏—é"
    
    print(f"\nüîç –ò—Å—Å–ª–µ–¥—É–µ–º: {query}")
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SGR –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        sgr_config = config.get_sgr_streaming_config()
        print("\nüìä SGR Streaming –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        for key, value in sgr_config.items():
            print(f"  {key}: {value}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º enhanced –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        print("\nüöÄ –ó–∞–ø—É—Å–∫ enhanced –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è...")
        
        result = await enhanced_graph.ainvoke({
            "messages": [{"role": "user", "content": query}]
        })
        
        print("\n‚úÖ Enhanced –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "final_report" in result:
            print(f"üìù –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ ({len(result['final_report'])} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        if "notes" in result:
            print(f"üìö –°–æ–±—Ä–∞–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(result.get('notes', []))}")
        
        if "research_brief" in result:
            print(f"üìã –ü–ª–∞–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {result.get('research_brief', 'N/A')[:100]}...")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ enhanced –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {e}")


async def streaming_focused_example():
    """–ü—Ä–∏–º–µ—Ä —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ streaming –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
    
    print("üé¨ Streaming-Focused SGR Example")
    print("=" * 50)
    
    if config is None:
        print("‚ùå SGR –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å streaming-focused workflow
    try:
        streaming_graph = SGRWorkflowBuilder.build_streaming_focused_workflow(config)
        print("‚úÖ Streaming-focused workflow —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback workflow: {e}")
        streaming_graph = SGRWorkflowBuilder.build_simple_sgr_workflow(config)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º streaming –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    query = "Research the future of renewable energy technologies"
    
    print(f"\nüéØ Streaming research: {query}")
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º streaming –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config.STREAMING_ENABLED = True
        config.STREAMING_DISPLAY_TYPE = "enhanced"
        config.STREAMING_UPDATE_INTERVAL = 0.1
        
        print(f"üéÆ Streaming –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"  Enabled: {config.STREAMING_ENABLED}")
        print(f"  Display: {config.STREAMING_DISPLAY_TYPE}")
        print(f"  Interval: {config.STREAMING_UPDATE_INTERVAL}s")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å streaming –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        print("\nüé¨ –ó–∞–ø—É—Å–∫ streaming –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è...")
        
        result = await streaming_graph.ainvoke({
            "messages": [{"role": "user", "content": query}]
        })
        
        print("\nüéâ Streaming –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if result:
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for key, value in result.items():
                if isinstance(value, str):
                    print(f"  {key}: {len(value)} —Å–∏–º–≤–æ–ª–æ–≤")
                elif isinstance(value, list):
                    print(f"  {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                else:
                    print(f"  {key}: {type(value).__name__}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ streaming –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {e}")


async def interactive_sgr_demo():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è SGR"""
    
    print("üéÆ Interactive SGR Demo")
    print("=" * 50)
    
    if config is None:
        print("‚ùå SGR –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º workflow
    workflow = UnifiedSGRWorkflow(config)
    graph = workflow.build_graph()
    
    print("‚úÖ SGR —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    print("üí° –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_input = input("\nüîç –í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'q']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not user_input:
                print("‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                continue
            
            print(f"\nüöÄ –ò—Å—Å–ª–µ–¥—É–µ–º: {user_input}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            result = await graph.ainvoke({
                "messages": [{"role": "user", "content": user_input}]
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if "final_report" in result and result["final_report"]:
                print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:")
                print("-" * 40)
                print(result["final_report"])
                print("-" * 40)
            else:
                print("\n‚ö†Ô∏è  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            continue


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–∞"""
    
    print("üéØ SGR Streaming Integration Examples")
    print("=" * 50)
    
    examples = {
        "1": ("Simple SGR Example", simple_sgr_example),
        "2": ("Enhanced SGR Example", enhanced_sgr_example), 
        "3": ("Streaming-Focused Example", streaming_focused_example),
        "4": ("Interactive Demo", interactive_sgr_demo)
    }
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
    for key, (name, _) in examples.items():
        print(f"  {key}. {name}")
    
    try:
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice in examples:
            name, func = examples[choice]
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫: {name}")
            await func()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())